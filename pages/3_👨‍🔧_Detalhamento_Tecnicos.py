import streamlit as st
import pandas as pd
from DB import DatabaseConnection
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Detalhamento por T√©cnico",
    page_icon="üë®‚Äçüîß",
    layout="wide"
)

# Estilo CSS personalizado
st.markdown("""
    <style>
    .stMetric {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .dataframe {
        font-size: 12px;
    }
    </style>
""", unsafe_allow_html=True)

# T√≠tulo principal
st.title("üë®‚Äçüîß Detalhamento por T√©cnico")

# Filtros
with st.container():
    st.markdown("### üéØ Filtros")
    
    col1, col2, col3 = st.columns([2,2,1])
    
    with col1:
        dias = st.slider(
            "üìÖ Per√≠odo de an√°lise (dias):",
            min_value=1,
            max_value=90,
            value=30,
            help="Filtrar dados dos √∫ltimos X dias"
        )

    # Calcular data limite
    data_limite = (datetime.now() - timedelta(days=dias)).strftime("%Y-%m-%d")
    
    # Carregar dados
    db = DatabaseConnection()
    df = db.execute_query(data_limite)
    
    if df is not None:
        # M√©tricas gerais
        total_tecnicos = df['TECNICO'].nunique()
        media_servicos = df.groupby('TECNICO').size().mean()
        total_servicos = len(df)
        
        # Cards com m√©tricas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total de T√©cnicos", f"{total_tecnicos:,.0f}")
        with col2:
            st.metric("M√©dia de Servi√ßos por T√©cnico", f"{media_servicos:,.1f}")
        with col3:
            st.metric("Total de Servi√ßos", f"{total_servicos:,.0f}")
            
        # An√°lise por t√©cnico
        st.markdown("### üìä An√°lise por T√©cnico")
        
        # Tabela de detalhamento
        df_tecnico = df.groupby('TECNICO').agg({
            'OS': 'count',
            'VALOR_T√âCNICO': 'sum',
            'DESLOCAMENTO': lambda x: pd.to_timedelta(x).mean()
        }).reset_index()
        
        df_tecnico.columns = ['T√©cnico', 'Total Servi√ßos', 'Valor Total', 'M√©dia Deslocamento']
        df_tecnico = df_tecnico.sort_values('Total Servi√ßos', ascending=False)
        
        # Gr√°fico de barras
        fig = px.bar(
            df_tecnico,
            x='T√©cnico',
            y='Total Servi√ßos',
            title='Servi√ßos por T√©cnico',
            color='Total Servi√ßos',
            color_continuous_scale='Reds'
        )
        fig.update_layout(showlegend=False)
        st.plotly_chart(fig, use_container_width=True)
        
        # Tabela detalhada
        st.markdown("### üìã Detalhamento")
        st.dataframe(
            df_tecnico.style.format({
                'Total Servi√ßos': '{:,.0f}',
                'Valor Total': 'R$ {:,.2f}',
                'M√©dia Deslocamento': lambda x: str(x).split()[-1]
            }),
            use_container_width=True
        )
        
        # An√°lise de efici√™ncia
        st.markdown("### üéØ An√°lise de Efici√™ncia")
        
        # Calcular m√©tricas de efici√™ncia
        df_eficiencia = df.groupby('TECNICO').agg({
            'OS': 'count',
            'VALOR_T√âCNICO': 'mean',
            'DESLOCAMENTO': lambda x: pd.to_timedelta(x).mean()
        }).reset_index()
        
        df_eficiencia.columns = ['T√©cnico', 'Quantidade Servi√ßos', 'Valor M√©dio', 'Tempo M√©dio Deslocamento']
        
        # Scatter plot
        fig = px.scatter(
            df_eficiencia,
            x='Tempo M√©dio Deslocamento',
            y='Valor M√©dio',
            size='Quantidade Servi√ßos',
            hover_name='T√©cnico',
            title='Efici√™ncia dos T√©cnicos (Valor vs. Tempo de Deslocamento)',
            labels={
                'Tempo M√©dio Deslocamento': 'Tempo M√©dio de Deslocamento',
                'Valor M√©dio': 'Valor M√©dio por Servi√ßo (R$)'
            }
        )
        st.plotly_chart(fig, use_container_width=True)
        
    else:
        st.error("N√£o foi poss√≠vel carregar os dados. Por favor, verifique a conex√£o com o banco de dados.")
