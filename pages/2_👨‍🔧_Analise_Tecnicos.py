import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from DB import DatabaseConnection

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise por T√©cnico",
    page_icon="üë®‚Äçüîß",
    layout="wide"
)

# T√≠tulo
st.title("üë®‚Äçüîß An√°lise por T√©cnico")

# Inicializar conex√£o com banco
db = DatabaseConnection()

# Filtros na sidebar
st.sidebar.title("üéØ Filtros")

# Datas
col1, col2 = st.sidebar.columns(2)

with col1:
    data_inicio = st.text_input(
        "üìÖ Data Inicial:",
        value="01/01/2025",
        help="Formato: DD/MM/YYYY"
    )

with col2:
    data_fim = st.text_input(
        "üìÖ Data Final:",
        value="28/01/2025",
        help="Formato: DD/MM/YYYY"
    )

# Carregar dados
df = db.execute_query(data_inicio, data_fim)

if df is not None and not df.empty:
    # Filtros adicionais
    tecnicos = st.sidebar.multiselect(
        "üë®‚Äçüîß T√©cnicos:",
        options=sorted(df['TECNICO'].unique()),
        default=[]
    )
    
    # Aplicar filtros
    if tecnicos:
        df = df[df['TECNICO'].isin(tecnicos)]
    
    # An√°lises por t√©cnico
    df_tecnico = df.groupby('TECNICO').agg({
        'VALOR_T√âCNICO': ['count', 'sum', 'mean'],
        'CIDADES': 'nunique',
        'STATUS': lambda x: (x == 'Conclu√≠do').sum() / len(x) * 100
    }).reset_index()
    
    # Renomear colunas
    df_tecnico.columns = [
        'T√©cnico', 'Total_Servicos', 'Valor_Total', 
        'Valor_Medio', 'Cidades_Atendidas', 'Taxa_Conclusao'
    ]
    
    # M√©tricas principais
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "T√©cnicos Ativos",
            f"{len(df_tecnico):,}",
            help="N√∫mero de t√©cnicos que realizaram servi√ßos no per√≠odo"
        )
    
    with col2:
        media_servicos = df_tecnico['Total_Servicos'].mean()
        st.metric(
            "M√©dia de Servi√ßos/T√©cnico",
            f"{media_servicos:,.1f}",
            help="M√©dia de servi√ßos por t√©cnico no per√≠odo"
        )
    
    with col3:
        media_valor = df_tecnico['Valor_Total'].mean()
        st.metric(
            "M√©dia de Valor/T√©cnico",
            f"R$ {media_valor:,.2f}",
            help="M√©dia de valor total por t√©cnico"
        )
    
    # Gr√°ficos
    col1, col2 = st.columns(2)
    
    with col1:
        # Top 10 t√©cnicos por n√∫mero de servi√ßos
        fig = px.bar(
            df_tecnico.nlargest(10, 'Total_Servicos'),
            x='T√©cnico',
            y='Total_Servicos',
            title='Top 10 T√©cnicos por N√∫mero de Servi√ßos',
            labels={'Total_Servicos': 'Total de Servi√ßos'},
            color='Total_Servicos',
            color_continuous_scale='Viridis'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Top 10 t√©cnicos por valor total
        fig = px.bar(
            df_tecnico.nlargest(10, 'Valor_Total'),
            x='T√©cnico',
            y='Valor_Total',
            title='Top 10 T√©cnicos por Valor Total',
            labels={'Valor_Total': 'Valor Total (R$)'},
            color='Valor_Total',
            color_continuous_scale='Viridis'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # An√°lise de desempenho
    st.subheader("üìä An√°lise de Desempenho")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Scatter plot: Servi√ßos x Valor M√©dio
        fig = px.scatter(
            df_tecnico,
            x='Total_Servicos',
            y='Valor_Medio',
            title='Rela√ß√£o entre N√∫mero de Servi√ßos e Valor M√©dio',
            labels={
                'Total_Servicos': 'Total de Servi√ßos',
                'Valor_Medio': 'Valor M√©dio (R$)'
            },
            hover_data=['T√©cnico', 'Taxa_Conclusao'],
            color='Taxa_Conclusao',
            color_continuous_scale='RdYlGn',
            size='Cidades_Atendidas'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Taxa de conclus√£o por t√©cnico
        fig = px.bar(
            df_tecnico.sort_values('Taxa_Conclusao', ascending=False),
            x='T√©cnico',
            y='Taxa_Conclusao',
            title='Taxa de Conclus√£o por T√©cnico',
            labels={'Taxa_Conclusao': 'Taxa de Conclus√£o (%)'},
            color='Taxa_Conclusao',
            color_continuous_scale='RdYlGn'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # Tabela detalhada
    with st.expander("üìã Dados Detalhados por T√©cnico"):
        st.dataframe(
            df_tecnico.sort_values('Total_Servicos', ascending=False),
            hide_index=True,
            use_container_width=True
        )

else:
    st.warning("Nenhum dado encontrado para o per√≠odo selecionado.")
