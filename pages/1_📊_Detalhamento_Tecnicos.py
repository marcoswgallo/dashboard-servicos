import streamlit as st
import plotly.express as px
import pandas as pd
from DB import DatabaseConnection

# ConfiguraÃ§Ã£o da pÃ¡gina
st.set_page_config(
    page_title="Detalhamento por TÃ©cnico",
    page_icon="ðŸ“Š",
    layout="wide"
)

# TÃ­tulo
st.title("ðŸ“Š Detalhamento por TÃ©cnico")

# Mapeamento de bases para tipos
base_tipos = {
    'InstalaÃ§Ã£o': [
        'BASE BAURU', 'BASE BOTUCATU', 'BASE CAMPINAS', 'BASE LIMEIRA',
        'BASE PAULINIA', 'BASE PIRACICABA', 'BASE RIBEIRAO PRETO',
        'BASE SAO JOSE DO RIO PRETO', 'BASE SOROCABA', 'BASE SUMARE',
        'GPON BAURU', 'GPON RIBEIRAO PRETO'
    ],
    'ManutenÃ§Ã£o': [
        'BASE ARARAS VT', 'BASE BOTUCATU VT', 'BASE MDU ARARAS',
        'BASE MDU BAURU', 'BASE MDU MOGI', 'BASE MDU PIRACICABA',
        'BASE MDU SJRP', 'BASE PIRACICABA VT', 'BASE RIBEIRÃƒO VT',
        'BASE SERTAOZINHO VT', 'BASE SUMARE VT', 'BASE VAR BAURU',
        'BASE VAR PIRACICABA', 'BASE VAR SUMARE'
    ],
    'DesconexÃ£o': [
        'DESCONEXAO', 'DESCONEXÃƒO BOTUCATU', 'DESCONEXÃƒO CAMPINAS',
        'DESCONEXAO RIBEIRAO PRETO'
    ]
}

# FunÃ§Ã£o para carregar dados
@st.cache_data
def load_data():
    try:
        db = DatabaseConnection()
        query = """
        SELECT * FROM "Basic"
        """
        df = db.execute_query(query)
        if df is not None:
            # Converter coluna de data para datetime usando o formato correto
            df['DATA'] = pd.to_datetime(df['DATA'], dayfirst=True)
            
            # Converter valores para numÃ©rico
            df['VALOR TÃ‰CNICO'] = pd.to_numeric(df['VALOR TÃ‰CNICO'].str.replace(',', '.'), errors='coerce')
            df['VALOR EMPRESA'] = pd.to_numeric(df['VALOR EMPRESA'].str.replace(',', '.'), errors='coerce')
            
            # Preencher valores nulos
            df['SERVIÃ‡O'] = df['SERVIÃ‡O'].fillna('')
            df['CIDADES'] = df['CIDADES'].fillna('')
            df['TECNICO'] = df['TECNICO'].fillna('')
            df['BASE'] = df['BASE'].fillna('')
            
            # Criar coluna de tipo de base
            df['TIPO_BASE'] = 'Outros'
            for tipo, bases in base_tipos.items():
                df.loc[df['BASE'].isin(bases), 'TIPO_BASE'] = tipo
            
            return df
        else:
            st.error("DataFrame vazio retornado pela consulta")
            return None
    except Exception as e:
        st.error(f"Erro ao carregar dados: {str(e)}")
        return None

# Carregar dados
df = load_data()

if df is not None:
    # Sidebar com filtros
    st.sidebar.header("Filtros")

    # Filtro de data
    min_date = df['DATA'].min()
    max_date = df['DATA'].max()

    # Tratar datas NaT
    if pd.isna(min_date):
        min_date = pd.Timestamp('2020-01-01')
    if pd.isna(max_date):
        max_date = pd.Timestamp('2025-12-31')

    # Converter para date
    min_date = min_date.date()
    max_date = max_date.date()

    # Filtro de data com formato brasileiro
    date_range = st.sidebar.date_input(
        "PerÃ­odo",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date,
        format="DD/MM/YYYY"
    )

    # Filtro de tipo de base
    tipo_base = st.sidebar.multiselect(
        "Tipo de Base",
        options=['InstalaÃ§Ã£o', 'ManutenÃ§Ã£o', 'DesconexÃ£o', 'Outros'],
        default=[]
    )

    # Filtro de base especÃ­fica
    bases_disponiveis = []
    if tipo_base:
        for tipo in tipo_base:
            if tipo == 'Outros':
                bases_outros = df[~df['BASE'].isin([b for bases in base_tipos.values() for b in bases])]['BASE'].unique()
                bases_disponiveis.extend(bases_outros)
            else:
                bases_disponiveis.extend(base_tipos[tipo])
    else:
        bases_disponiveis = sorted(df['BASE'].unique())

    base = st.sidebar.multiselect(
        "Base",
        options=sorted(bases_disponiveis),
        default=[]
    )

    # Outros filtros
    servico = st.sidebar.multiselect(
        "ServiÃ§o",
        options=sorted([s for s in df['SERVIÃ‡O'].unique() if s != '']),
        default=[]
    )

    cidade = st.sidebar.multiselect(
        "Cidade",
        options=sorted([c for c in df['CIDADES'].unique() if c != '']),
        default=[]
    )

    tecnico = st.sidebar.multiselect(
        "TÃ©cnico",
        options=sorted([t for t in df['TECNICO'].unique() if t != '']),
        default=[]
    )

    # Aplicar filtros
    # Filtro de data
    if len(date_range) == 2:
        start_date, end_date = date_range
        df_filtered = df[
            (df['DATA'].dt.date >= start_date) &
            (df['DATA'].dt.date <= end_date)
        ]
    else:
        df_filtered = df.copy()
    
    # Filtro de tipo de base e base
    if tipo_base:
        df_filtered = df_filtered[df_filtered['TIPO_BASE'].isin(tipo_base)]
    if base:
        df_filtered = df_filtered[df_filtered['BASE'].isin(base)]
    
    # Outros filtros
    if servico:
        df_filtered = df_filtered[df_filtered['SERVIÃ‡O'].isin(servico)]
    if cidade:
        df_filtered = df_filtered[df_filtered['CIDADES'].isin(cidade)]
    if tecnico:
        df_filtered = df_filtered[df_filtered['TECNICO'].isin(tecnico)]

    if not df_filtered.empty:
        # Filtrar apenas serviÃ§os executados
        df_executado = df_filtered[df_filtered['STATUS'].str.upper() == 'EXECUTADO']
        df_executado['DATA'] = df_executado['DATA'].dt.date

        # Calcular mÃ©tricas por tÃ©cnico (apenas executados)
        # Primeiro agrupamos por tÃ©cnico, data e contrato para ter contratos Ãºnicos por dia
        df_contratos_por_dia = df_executado.groupby(['TECNICO', 'DATA', 'CONTRATO']).agg({
            'VALOR TÃ‰CNICO': 'sum'  # Soma do valor por contrato
        }).reset_index()

        # Agora calculamos as mÃ©tricas finais
        metricas_tecnico = df_contratos_por_dia.groupby('TECNICO').agg({
            'DATA': 'nunique',  # Dias trabalhados
            'CONTRATO': 'count',  # Total de contratos Ãºnicos
            'VALOR TÃ‰CNICO': 'sum'  # Valor total
        }).reset_index()

        # Renomear colunas
        metricas_tecnico.columns = ['TECNICO', 'Dias Trabalhados', 'Contratos Executados', 'Valor Total']

        # Calcular distribuiÃ§Ã£o de status por tÃ©cnico e contrato Ãºnico
        status_por_tecnico = df_filtered.groupby(['TECNICO', 'CONTRATO', 'STATUS']).size().reset_index()
        status_por_tecnico = status_por_tecnico.groupby(['TECNICO', 'STATUS']).size().unstack(fill_value=0)

        # Juntar com distribuiÃ§Ã£o de status
        metricas_tecnico = metricas_tecnico.merge(status_por_tecnico, on='TECNICO', how='left')

        # Calcular mÃ©dias (usando apenas contratos executados)
        metricas_tecnico['MÃ©dia de Contratos/Dia'] = metricas_tecnico['Contratos Executados'] / metricas_tecnico['Dias Trabalhados']
        metricas_tecnico['MÃ©dia por Dia'] = metricas_tecnico['Valor Total'] / metricas_tecnico['Dias Trabalhados']

        # Criar trÃªs colunas para os grÃ¡ficos
        col1, col2, col3 = st.columns(3)

        with col1:
            # GrÃ¡fico de dias trabalhados
            fig_dias = px.bar(
                metricas_tecnico.nlargest(10, 'Dias Trabalhados'),
                x='TECNICO',
                y='Dias Trabalhados',
                title='Top 10 TÃ©cnicos por Dias Trabalhados'
            )
            fig_dias.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig_dias, use_container_width=True)

        with col2:
            # GrÃ¡fico de mÃ©dia de contratos por dia
            fig_media_contratos = px.bar(
                metricas_tecnico.nlargest(10, 'MÃ©dia de Contratos/Dia'),
                x='TECNICO',
                y='MÃ©dia de Contratos/Dia',
                title='Top 10 TÃ©cnicos - MÃ©dia de Contratos por Dia'
            )
            fig_media_contratos.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig_media_contratos, use_container_width=True)

        with col3:
            # GrÃ¡fico de mÃ©dia de valor por dia
            fig_media_valor = px.bar(
                metricas_tecnico.nlargest(10, 'MÃ©dia por Dia'),
                x='TECNICO',
                y='MÃ©dia por Dia',
                title='Top 10 TÃ©cnicos - Faturamento MÃ©dio por Dia'
            )
            fig_media_valor.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig_media_valor, use_container_width=True)

        # Formatar valores monetÃ¡rios e decimais
        metricas_tecnico['Valor Total'] = metricas_tecnico['Valor Total'].apply(lambda x: f'R$ {x:,.2f}')
        metricas_tecnico['MÃ©dia por Dia'] = metricas_tecnico['MÃ©dia por Dia'].apply(lambda x: f'R$ {x:,.2f}')
        metricas_tecnico['MÃ©dia de Contratos/Dia'] = metricas_tecnico['MÃ©dia de Contratos/Dia'].round(1)

        # Exibir tabela completa
        st.subheader('Detalhamento Completo por TÃ©cnico')
        st.dataframe(metricas_tecnico.sort_values('Dias Trabalhados', ascending=False), hide_index=True)
