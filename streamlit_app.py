import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from DB import DatabaseConnection
import pandas as pd
from datetime import datetime, date
import locale

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard de An√°lise",
    page_icon="üìà",
    layout="wide"
)

# Criar mapeamento de bases para tipos
base_tipos = {
    'Instala√ß√£o': [
        'BASE BAURU', 'BASE BOTUCATU', 'BASE CAMPINAS', 'BASE LIMEIRA',
        'BASE PAULINIA', 'BASE PIRACICABA', 'BASE RIBEIRAO PRETO',
        'BASE SAO JOSE DO RIO PRETO', 'BASE SOROCABA', 'BASE SUMARE',
        'GPON BAURU', 'GPON RIBEIRAO PRETO'
    ],
    'Manuten√ß√£o': [
        'BASE ARARAS VT', 'BASE BOTUCATU VT', 'BASE MDU ARARAS',
        'BASE MDU BAURU', 'BASE MDU MOGI', 'BASE MDU PIRACICABA',
        'BASE MDU SJRP', 'BASE PIRACICABA VT', 'BASE RIBEIR√ÉO VT',
        'BASE SERTAOZINHO VT', 'BASE SUMARE VT', 'BASE VAR BAURU',
        'BASE VAR PIRACICABA', 'BASE VAR SUMARE'
    ],
    'Desconex√£o': [
        'DESCONEXAO', 'DESCONEX√ÉO BOTUCATU', 'DESCONEX√ÉO CAMPINAS',
        'DESCONEXAO RIBEIRAO PRETO'
    ]
}

# Fun√ß√£o para carregar os dados
@st.cache_data
def load_data():
    db = DatabaseConnection()
    query = """
    SELECT * FROM "Basic"
    """
    df = db.execute_query(query)
    if df is not None:
        # Converter coluna de data para datetime usando o formato correto
        df['DATA'] = pd.to_datetime(df['DATA'], dayfirst=True)
        
        # Converter valores para num√©rico
        df['VALOR T√âCNICO'] = pd.to_numeric(df['VALOR T√âCNICO'].str.replace(',', '.'), errors='coerce')
        df['VALOR EMPRESA'] = pd.to_numeric(df['VALOR EMPRESA'].str.replace(',', '.'), errors='coerce')
        
        # Preencher valores nulos
        df['SERVI√áO'] = df['SERVI√áO'].fillna('')
        df['CIDADES'] = df['CIDADES'].fillna('')
        df['TECNICO'] = df['TECNICO'].fillna('')
        df['BASE'] = df['BASE'].fillna('')
        
        # Criar coluna de tipo de base
        df['TIPO_BASE'] = 'Outros'
        for tipo, bases in base_tipos.items():
            df.loc[df['BASE'].isin(bases), 'TIPO_BASE'] = tipo
        
    return df

# Carregar os dados
try:
    df = load_data()
    if df is None:
        st.error("N√£o foi poss√≠vel conectar ao banco de dados. Verifique as configura√ß√µes de conex√£o.")
        st.stop()
except Exception as e:
    st.error(f"Erro ao carregar dados: {str(e)}")
    st.stop()

# Verificar se h√° dados
if df.empty:
    st.warning("N√£o h√° dados dispon√≠veis para exibi√ß√£o.")
    st.stop()

# T√≠tulo
st.title("üìà Dashboard de An√°lise")

# Sidebar com filtros
st.sidebar.header("Filtros")

# Filtro de data
min_date = df['DATA'].min()
max_date = df['DATA'].max()

# Tratar datas NaT
if pd.isna(min_date):
    min_date = pd.Timestamp('2020-01-01')
if pd.isna(max_date):
    max_date = pd.Timestamp('2025-12-31')

# Converter para date
min_date = min_date.date()
max_date = max_date.date()

# Filtro de data com formato brasileiro
date_range = st.sidebar.date_input(
    "Per√≠odo",
    value=(min_date, max_date),
    min_value=min_date,
    max_value=max_date,
    format="DD/MM/YYYY"
)

# Filtro de tipo de base
tipo_base = st.sidebar.multiselect(
    "Tipo de Base",
    options=['Instala√ß√£o', 'Manuten√ß√£o', 'Desconex√£o', 'Outros'],
    default=[]
)

# Filtro de base espec√≠fica
bases_disponiveis = []
if tipo_base:
    for tipo in tipo_base:
        if tipo == 'Outros':
            bases_outros = df[~df['BASE'].isin([b for bases in base_tipos.values() for b in bases])]['BASE'].unique()
            bases_disponiveis.extend(bases_outros)
        else:
            bases_disponiveis.extend(base_tipos[tipo])
else:
    bases_disponiveis = sorted(df['BASE'].unique())

base = st.sidebar.multiselect(
    "Base",
    options=sorted(bases_disponiveis),
    default=[]
)

# Filtros dropdown
servico = st.sidebar.multiselect(
    "Servi√ßo",
    options=sorted([s for s in df['SERVI√áO'].unique() if s != '']),
    default=[]
)

cidade = st.sidebar.multiselect(
    "Cidade",
    options=sorted([c for c in df['CIDADES'].unique() if c != '']),
    default=[]
)

tecnico = st.sidebar.multiselect(
    "T√©cnico",
    options=sorted([t for t in df['TECNICO'].unique() if t != '']),
    default=[]
)

# Aplicar filtros
if df is not None:
    # Filtro de data
    if len(date_range) == 2:
        start_date, end_date = date_range
        df_filtered = df[
            (df['DATA'].dt.date >= start_date) &
            (df['DATA'].dt.date <= end_date)
        ]
    else:
        df_filtered = df.copy()
    
    # Filtro de tipo de base e base
    if tipo_base:
        df_filtered = df_filtered[df_filtered['TIPO_BASE'].isin(tipo_base)]
    if base:
        df_filtered = df_filtered[df_filtered['BASE'].isin(base)]
    
    # Outros filtros
    if servico:
        df_filtered = df_filtered[df_filtered['SERVI√áO'].isin(servico)]
    if cidade:
        df_filtered = df_filtered[df_filtered['CIDADES'].isin(cidade)]
    if tecnico:
        df_filtered = df_filtered[df_filtered['TECNICO'].isin(tecnico)]
    
    # Debug - mostrar valores √∫nicos de STATUS
    st.sidebar.write("Status dispon√≠veis:", df_filtered['STATUS'].unique())
    
    # Criar uma c√≥pia filtrada apenas com status EXECUTADO para os gr√°ficos
    df_executado = df_filtered[df_filtered['STATUS'].str.upper() == 'EXECUTADO'].copy()
    
    # Debug - mostrar quantidade de registros
    st.sidebar.write("Total de registros:", len(df_filtered))
    st.sidebar.write("Registros executados:", len(df_executado))
    
    # M√©tricas principais em destaque no topo
    st.markdown("""
    <style>
    div[data-testid="metric-container"] {
        background-color: rgba(28, 131, 225, 0.1);
        border: 1px solid rgba(28, 131, 225, 0.1);
        padding: 5% 5% 5% 10%;
        border-radius: 5px;
        color: rgb(30, 103, 119);
        overflow-wrap: break-word;
    }

    /* breakline for metric text         */
    div[data-testid="metric-container"] > label[data-testid="stMetricLabel"] > div {
        overflow-wrap: break-word;
        white-space: break-spaces;
        color: rgb(49, 51, 63);
    }
    </style>
    """, unsafe_allow_html=True)

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Total de Servi√ßos", f"{len(df_filtered):,}")
    with col2:
        st.metric("Cidades Atendidas", df_filtered['CIDADES'].nunique())
    with col3:
        st.metric("T√©cnicos Ativos", df_filtered['TECNICO'].nunique())
    with col4:
        valor_medio = df_executado['VALOR EMPRESA'].mean()
        st.metric("Valor M√©dio", f"R$ {valor_medio:,.2f}" if pd.notna(valor_medio) else "N/A")
    
    # Espa√ßo ap√≥s as m√©tricas
    st.markdown("---")
    
    # Status das Atividades centralizado
    st.subheader("Status das Atividades")
    status_counts = df_filtered['STATUS'].value_counts().reset_index()
    status_counts.columns = ['STATUS', 'Quantidade']
    if not status_counts.empty:
        status_fig = px.pie(
            status_counts,
            values='Quantidade',
            names='STATUS',
            title='Distribui√ß√£o de Status'
        )
        st.plotly_chart(status_fig, use_container_width=True)
    else:
        st.info("Sem dados para mostrar")

    # Linha divis√≥ria
    st.markdown("---")
    
    # Layout em duas colunas para os gr√°ficos dos t√©cnicos
    col1, col2 = st.columns(2)
    
    # Gr√°ficos
    with col1:
        # Top 10 T√©cnicos por Maior Valor Total (apenas EXECUTADO)
        st.subheader("Top 10 T√©cnicos - Maior Faturamento")
        st.caption("Status: EXECUTADO")
        tech_data = df_executado.groupby('TECNICO')['VALOR EMPRESA'].sum().reset_index()
        if not tech_data.empty:
            # Filtrar apenas t√©cnicos com faturamento > 0
            tech_data = tech_data[tech_data['VALOR EMPRESA'] > 0]
            tech_data_top = tech_data.sort_values('VALOR EMPRESA', ascending=False).head(10)
            tech_fig = px.bar(
                tech_data_top,
                x='TECNICO',
                y='VALOR EMPRESA',
                title='Maiores Faturamentos',
                labels={'VALOR EMPRESA': 'Valor Total (R$)', 'TECNICO': 'T√©cnico'}
            )
            # Formatando os valores no eixo y para mostrar em reais
            tech_fig.update_layout(
                yaxis=dict(
                    tickprefix="R$ ",
                    tickformat=",.2f"
                )
            )
            st.plotly_chart(tech_fig, use_container_width=True)
        else:
            st.info("Sem dados para mostrar")

    with col2:
        # Top 10 T√©cnicos por Menor Valor Total (apenas EXECUTADO)
        st.subheader("Top 10 T√©cnicos - Menor Faturamento")
        st.caption("Status: EXECUTADO")
        if not tech_data.empty:
            # Filtrar apenas t√©cnicos com faturamento > 0
            tech_data = tech_data[tech_data['VALOR EMPRESA'] > 0]
            tech_data_bottom = tech_data.sort_values('VALOR EMPRESA', ascending=True).head(10)
            tech_fig_bottom = px.bar(
                tech_data_bottom,
                x='TECNICO',
                y='VALOR EMPRESA',
                title='Menores Faturamentos',
                labels={'VALOR EMPRESA': 'Valor Total (R$)', 'TECNICO': 'T√©cnico'},
                color_discrete_sequence=['#EF553B']  # Cor diferente para diferenciar do gr√°fico anterior
            )
            # Formatando os valores no eixo y para mostrar em reais
            tech_fig_bottom.update_layout(
                yaxis=dict(
                    tickprefix="R$ ",
                    tickformat=",.2f"
                )
            )
            st.plotly_chart(tech_fig_bottom, use_container_width=True)
        else:
            st.info("Sem dados para mostrar")
    
    # Linha divis√≥ria
    st.markdown("---")

    # Top 10 Cidades centralizado
    st.subheader("Top 10 Cidades")
    st.caption("Status: EXECUTADO")
    city_data = df_executado['CIDADES'].value_counts().reset_index()
    city_data.columns = ['CIDADES', 'Quantidade']
    city_data = city_data.head(10)
    if not city_data.empty:
        city_fig = px.bar(
            city_data,
            x='CIDADES',
            y='Quantidade',
            title='Servi√ßos Executados por Cidade'
        )
        st.plotly_chart(city_fig, use_container_width=True)
    else:
        st.info("Sem dados para mostrar")
else:
    st.error("N√£o foi poss√≠vel carregar os dados. Verifique a conex√£o com o banco de dados.")
